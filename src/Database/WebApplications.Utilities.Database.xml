<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>WebApplications.Utilities.Database</name>
  </assembly>
  <members>
    <member name="N:WebApplications.Utilities.Database.Collections">
    </member>
    <member name="T:WebApplications.Utilities.Database.Collections.CollectionProperty`2">
      <summary>
Implements a property that is itself a collection, unlike normal properties, this property can be modified by items being added/removed from the current list.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.CollectionProperty`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>
Initializes a new instance of the $LS$$SL$$LE$CollectionProperty<TKey,TValue>$EL$ class.</summary>
      <param name="key">
The key.</param>
      <param name="originalCollection">
The original collection. (<c>null</c> if not yet retrieved)</param>
      <param name="currentCollection">
The current collection. (<c>null</c> if not yet setting)</param>
      <param name="comparer">
The comparer.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.CollectionProperty`2.GetEnumerator">
      <summary>
Returns an enumerator that iterates through the collection.</summary>
      <returns>
A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.CollectionProperty`2.Add(`1)">
      <summary>
Adds an item to the $MSDNLS$T:System.Collections.Generic.ICollection`1$MSDNLE$ICollection<T>$MSDNEL$.</summary>
      <param name="item">
The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="System.NotSupportedException">
The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.CollectionProperty`2.Clear">
      <summary>
Removes all items from the $MSDNLS$T:System.Collections.Generic.ICollection`1$MSDNLE$ICollection<T>$MSDNEL$.</summary>
      <exception cref="System.NotSupportedException">
The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.CollectionProperty`2.Contains(`1)">
      <summary>
Determines whether the $MSDNLS$T:System.Collections.Generic.ICollection`1$MSDNLE$ICollection<T>$MSDNEL$ contains a specific value.</summary>
      <returns>
true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="item">
The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.CollectionProperty`2.CopyTo(`1[],System.Int32)">
      <summary>
Copies the elements of the $MSDNLS$T:System.Collections.Generic.ICollection`1$MSDNLE$ICollection<T>$MSDNEL$ to an $MSDNLS$T:System.Array$MSDNLE$Array$MSDNEL$, starting at a particular $MSDNLS$T:System.Array$MSDNLE$Array$MSDNEL$ index.</summary>
      <param name="array">
The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">
The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="System.ArgumentNullException">
<paramref name="array" /> is null.</exception>
      <exception cref="System.ArgumentOutOfRangeException">
<paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="System.ArgumentException">
<paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type T cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.CollectionProperty`2.Remove(`1)">
      <summary>
Removes the first occurrence of a specific object from the $MSDNLS$T:System.Collections.Generic.ICollection`1$MSDNLE$ICollection<T>$MSDNEL$.</summary>
      <returns>
true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">
The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="System.NotSupportedException">
The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:WebApplications.Utilities.Database.Collections.CollectionProperty`2.Count">
      <summary>
Gets the number of elements contained in the $MSDNLS$T:System.Collections.Generic.ICollection`1$MSDNLE$ICollection<T>$MSDNEL$.</summary>
      <value>
The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</value>
    </member>
    <member name="P:WebApplications.Utilities.Database.Collections.CollectionProperty`2.IsReadOnly">
      <summary>
Gets a value indicating whether the $MSDNLS$T:System.Collections.Generic.ICollection`1$MSDNLE$ICollection<T>$MSDNEL$ is read-only.</summary>
      <value>
true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</value>
    </member>
    <member name="T:WebApplications.Utilities.Database.Collections.Property`1">
      <summary>
Holds a property, with original and current value.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.Property`1.ToString">
      <summary>
Returns a $MSDNLS$T:System.String$MSDNLE$String$MSDNEL$ that represents this instance.</summary>
      <returns>
A <see cref="System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:WebApplications.Utilities.Database.Collections.Property`1.IsDirty">
      <summary>
Gets or sets a value indicating whether the property is dirty.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.Collections.Property`1.Set">
      <summary>
$C$true$END-C$ if the $LS$$SL$$LE$Current$EL$ value has been set.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Database.Collections.Property`2">
      <summary>
Holds a property, with original and current value.</summary>
      <remarks>
<para>The careful use of generics allows the IsDirty flag to be set when creating the property, by using the correct Equals method based on type.</para></remarks>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.Property`2.#ctor(`0,`1,`1,System.Boolean,System.Boolean)">
      <summary>
Initializes a new instance of the $LS$$SL$$LE$Property<TKey,TValue>$EL$ class.</summary>
      <param name="key">
The key.</param>
      <param name="original">
The original.</param>
      <param name="current">
The current.</param>
      <param name="retrieved">
if set to <c>true</c> then the original value was retrieved.</param>
      <param name="set">
if set to <c>true</c> then the current value was set.</param>
    </member>
    <member name="T:WebApplications.Utilities.Database.Collections.PropertyCollection`1">
      <summary>
Allows a set of properties to be maintained in a thread safe way, but keeps track of what has changed.</summary>
      <remarks>
<para>You can enumerate over the current values.</para></remarks>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
Initializes a new instance of the $LS$topic_00000000000000F1$SL$$LE$PropertyCollection$EL$ class.</summary>
      <param name="comparer">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
Initializes a new instance of the $LS$topic_00000000000000F1$SL$$LE$PropertyCollection$EL$ class.</summary>
      <param name="concurrencyLevel">
</param>
      <param name="capacity">
</param>
      <param name="comparer">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.GetEnumerator">
      <summary>
Returns an enumerator that iterates through the collection.</summary>
      <returns>
A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.IsChanged(`0)">
      <summary>
Determines whether the specified key is changed.</summary>
      <returns>
<c>true</c> if the specified key is changed; otherwise, <c>false</c>.</returns>
      <param name="key">
The key.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.ToString">
      <summary>
Returns a $MSDNLS$T:System.String$MSDNLE$String$MSDNEL$ that represents this instance.</summary>
      <returns>
A <see cref="System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:WebApplications.Utilities.Database.Collections.PropertyCollection`1.IsDirty">
      <summary>
Gets a value indicating whether any of the properties have changed from their original values.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.Collections.PropertyCollection`1.ChangedProperties">
      <summary>
Gets the changed properties.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.AddOrUpdate``1(`0,``0,System.Func{`0,WebApplications.Utilities.Database.Collections.Property{`0},``0})">
      <summary>
Adds or updates the property.</summary>
      <returns>
The original property</returns>
      <param name="key">
The key.</param>
      <param name="addValue">
The add value.</param>
      <param name="updateValueFactory">
The update value factory.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.AddOrUpdate``1(`0,System.Func{`0,``0},System.Func{`0,WebApplications.Utilities.Database.Collections.Property{`0},``0})">
      <summary>
Adds or updates the property.</summary>
      <returns>
The original property</returns>
      <param name="key">
The key.</param>
      <param name="addValueFactory">
The add value factory.</param>
      <param name="updateValueFactory">
The update value factory.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.AddOrUpdateOriginal``1(`0,``0,System.Boolean)">
      <summary>
Adds or updates the original value.</summary>
      <remarks>
<para>If an addition is required because the <see cref="key" /> has not been seen previousy, then both the original value and the current value are set to the same value.</para> <para>If an update occurs because the <see cref="key" /> has been seen previousy, then both the original value is updated and the current value is set to the same value, if <see cref="clearCurrent" /> is <c>true</c>; otherwise it is left unchanged.</para></remarks>
      <returns>
The last original value.</returns>
      <param name="key">
The key.</param>
      <param name="value">
The new original value.</param>
      <param name="clearCurrent">
if set to <c>true</c> then the current value is cleared on update.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.AddOrUpdateOriginal``1(`0,``0,System.Func{`0,``0,``0},System.Boolean)">
      <summary>
Adds or updates the original value.</summary>
      <remarks>
<para>If an addition is required because the <see cref="key" /> has not been seen previousy, then both the original value and the current value are set to the same value.</para> <para>If an update occurs because the <see cref="key" /> has been seen previousy, then both the original value is updated and the current value is set to the same value, if <see cref="clearCurrent" /> is <c>true</c>; otherwise it is left unchanged.</para></remarks>
      <returns>
The last original value.</returns>
      <param name="key">
The key.</param>
      <param name="addValue">
The value to insert on addition.</param>
      <param name="updateValueFactory">
The update value factory.</param>
      <param name="clearCurrent">
if set to <c>true</c> then the current value is cleared on update.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.AddOrUpdateOriginal``1(`0,System.Func{`0,``0},System.Func{`0,``0,``0},System.Boolean)">
      <summary>
Adds or updates the original value.</summary>
      <remarks>
<para>If an addition is required because the <see cref="key" /> has not been seen previousy, then both the original value and the current value are set to the same value.</para> <para>If an update occurs because the <see cref="key" /> has been seen previousy, then both the original value is updated and the current value is set to the same value, if <see cref="clearCurrent" /> is <c>true</c>; otherwise it is left unchanged.</para></remarks>
      <returns>
The last original value.</returns>
      <param name="key">
The key.</param>
      <param name="addValueFactory">
The add value factory.</param>
      <param name="updateValueFactory">
The update value factory.</param>
      <param name="clearCurrent">
if set to <c>true</c> then the current value is cleared on update.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.AddOrUpdateCurrent``1(`0,``0)">
      <summary>
Adds or updates the current value.</summary>
      <remarks>
<para>If an addition is required because the <see cref="key" /> has not been seen previousy, then both the original value and the current value are set to the same value.</para> <para>If an update occurs because the <see cref="key" /> has been seen previousy, then only the current value is set to the new current value.</para></remarks>
      <returns>
The last current value.</returns>
      <param name="key">
The key.</param>
      <param name="value">
The new current value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.AddOrUpdateCurrent``1(`0,``0,System.Func{`0,``0,``0})">
      <summary>
Adds or updates the current value.</summary>
      <remarks>
<para>If an addition is required because the <see cref="key" /> has not been seen previousy, then both the original value and the current value are set to the same value.</para> <para>If an update occurs because the <see cref="key" /> has been seen previousy, then only the current value is set to the new current value.</para></remarks>
      <returns>
The last current value.</returns>
      <param name="key">
The key.</param>
      <param name="addValue">
The add value.</param>
      <param name="updateValueFactory">
The update value factory.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.AddOrUpdateCurrent``1(`0,System.Func{`0,``0},System.Func{`0,``0,``0})">
      <summary>
Adds or updates the current value.</summary>
      <remarks>
<para>If an addition is required because the <see cref="key" /> has not been seen previousy, then both the original value and the current value are set to the same value.</para> <para>If an update occurs because the <see cref="key" /> has been seen previousy, then only the current value is set to the new current value.</para></remarks>
      <returns>
The last current value.</returns>
      <param name="key">
The key.</param>
      <param name="addValueFactory">
The add value factory.</param>
      <param name="updateValueFactory">
The update value factory.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.GetOrAdd``1(`0,``0)">
      <summary>
Gets or Adds the property.</summary>
      <returns>
The original property.</returns>
      <param name="key">
The key.</param>
      <param name="value">
The value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.GetOrAdd``1(`0,System.Func{`0,``0})">
      <summary>
Gets or Adds the property.</summary>
      <returns>
The original property.</returns>
      <param name="key">
The key.</param>
      <param name="valueFactory">
The value factory.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.GetOrAddOriginal``1(`0,``0)">
      <summary>
Gets or adds the original value.</summary>
      <returns>
The original value</returns>
      <param name="key">
The key.</param>
      <param name="value">
The value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.GetOrAddOriginal``1(`0,System.Func{`0,``0})">
      <summary>
Gets or adds the original value.</summary>
      <returns>
The original value</returns>
      <param name="key">
The key.</param>
      <param name="valueFactory">
The value factory.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.GetOrAddCurrent``1(`0,``0)">
      <summary>
Gets or adds the current value.</summary>
      <returns>
The original value</returns>
      <param name="key">
The key.</param>
      <param name="value">
The value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.GetOrAddCurrent``1(`0,System.Func{`0,``0})">
      <summary>
Gets or adds the original value.</summary>
      <returns>
The original value</returns>
      <param name="key">
The key.</param>
      <param name="valueFactory">
The value factory.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.TryAdd``1(`0,``0)">
      <summary>
Tries to add the property..</summary>
      <returns>
<c>true</c> if the property was successfully added; otherwise <c>false</c>.</returns>
      <param name="key">
The key.</param>
      <param name="value">
The value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.TryGetProperty(`0,WebApplications.Utilities.Database.Collections.Property{`0}@)">
      <summary>
Tries to get the property.</summary>
      <returns>
<c>true</c> if succeeded; otherwise <c>false</c>.</returns>
      <param name="key">
The key.</param>
      <param name="property">
The property.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.TryGetProperty``1(`0,``0@)">
      <summary>
Tries to get the property.</summary>
      <returns>
<c>true</c> if succeeded; otherwise <c>false</c>.</returns>
      <param name="key">
The key.</param>
      <param name="property">
The property.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.TryGetOriginal``1(`0,``0@)">
      <summary>
$para$Tries to get the original value.$para-end$   $para$Note that if the original value has not yet been retrieved this will return false,     even if a current value exists for the key.$para-end$</summary>
      <returns>
<c>true</c> if succeeded; otherwise <c>false</c>.</returns>
      <param name="key">
The key.</param>
      <param name="value">
The value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.TryGetCurrent``1(`0,``0@)">
      <summary>
$para$Tries to get the original value.$para-end$   $para$Note that if the current value has not yet been set, but an original value has been retrieved     then this will return true, and set to the value to the original value.$para-end$</summary>
      <returns>
<c>true</c> if succeeded; otherwise <c>false</c>.</returns>
      <param name="key">
The key.</param>
      <param name="value">
The value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.TryRemove(`0)">
      <summary>
Tries to remove the property.</summary>
      <returns>
<c>true</c> if succeeded; otherwise <c>false</c>.</returns>
      <param name="key">
The key.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.TryRemoveOriginal``1(`0,``0@)">
      <summary>
Tries to remove the property.</summary>
      <returns>
<c>true</c> if succeeded; otherwise <c>false</c>.</returns>
      <param name="key">
The key.</param>
      <param name="value">
The current value removed (if any).</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.TryRemoveCurrent``1(`0,``0@)">
      <summary>
Tries to remove the property.</summary>
      <returns>
<c>true</c> if succeeded; otherwise <c>false</c>.</returns>
      <param name="key">
The key.</param>
      <param name="value">
The current value removed (if any).</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.TryRemoveProperty(`0,WebApplications.Utilities.Database.Collections.Property{`0}@)">
      <summary>
Tries to remove the property.</summary>
      <returns>
<c>true</c> if succeeded; otherwise <c>false</c>.</returns>
      <param name="key">
The key.</param>
      <param name="property">
The property.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.TryRemoveProperty``1(`0,``0@)">
      <summary>
Tries to remove the property.</summary>
      <returns>
<c>true</c> if succeeded; otherwise <c>false</c>.</returns>
      <param name="key">
The key.</param>
      <param name="property">
The property.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.Collections.PropertyCollection`1.Clear">
      <summary>
Clears the properties.</summary>
    </member>
    <member name="N:WebApplications.Utilities.Database">
    </member>
    <member name="T:WebApplications.Utilities.Database.Column">
      <summary>
Holds information about a column to property mapping and associated value.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.Column.ColunnRetrieved">
      <summary>
Gets or sets the time the colunn was last retrieved.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.Column.ColumnValue">
      <summary>
Gets or sets the column value.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.Column.PropertySet">
      <summary>
Gets or sets the time the property was last set.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.Column.IsDirty">
      <summary>
Flag indicatting whether the column is dirty.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.Column.PropertyValue">
      <summary>
Gets or sets the property value.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Database.ColumnAttribute">
      <summary>
Defines the relationship between a $LS$topic_000000000000013A$SL$$LE$Database Object$EL$'s property and it's   column in a SQL table.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.ColumnAttribute.#ctor">
      <summary>
Initializes a new instance of the $LS$topic_0000000000000119$SL$$LE$ColumnAttribute$EL$ class.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.ColumnAttribute.#ctor(System.String)">
      <summary>
Initializes a new instance of the $LS$topic_0000000000000119$SL$$LE$ColumnAttribute$EL$ class.</summary>
      <param name="columnName">
Name of the column.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.ColumnAttribute.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
Populates a $MSDNLS$T:System.Runtime.Serialization.SerializationInfo$MSDNLE$SerializationInfo$MSDNEL$ with the data needed to serialize the target object.</summary>
      <param name="info">
The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">
The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="System.Security.SecurityException">
The caller does not have the required permission.</exception>
    </member>
    <member name="M:WebApplications.Utilities.Database.ColumnAttribute.CompileTimeInitialize(PostSharp.Reflection.LocationInfo,PostSharp.Aspects.AspectInfo)">
      <summary>
Method invoked at build time to initialize the instance fields of the current aspect. This method is invoked   before any other build-time method.</summary>
      <param name="targetLocation">
Location to which the current aspect is applied</param>
      <param name="aspectInfo">
Reserved for future usage.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.ColumnAttribute.ToSql(System.Object)">
      <summary>
Converts a value to it's SQL equivalent</summary>
      <param name="value">
The value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.ColumnAttribute.FromSql(System.Object)">
      <summary>
Converts a value to it's CLR equivalent</summary>
      <param name="value">
The value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.ColumnAttribute.AreEqual(System.Object,System.Object)">
      <summary>
Assess whether the property value and column value are equal</summary>
      <returns>
<c>True</c> if equal; otherwise <c>false</c>.</returns>
      <param name="propertyValue">
The property value.</param>
      <param name="columnValue">
The column value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.ColumnAttribute.IsValid(System.Object)">
      <summary>
Determines whether the specified property value is valid.</summary>
      <returns>
<c>true</c> if the specified property value is valid; otherwise, <c>false</c>.</returns>
      <param name="propertyValue">
The property value.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.ColumnAttribute.ToString">
      <summary>
Returns a $MSDNLS$T:System.String$MSDNLE$String$MSDNEL$ that represents this instance.</summary>
      <returns>
A <see cref="System.String" /> that represents this instance.</returns>
    </member>
    <member name="P:WebApplications.Utilities.Database.ColumnAttribute.IsForeignKey">
      <summary>
Gets or sets a value indicating whether the column is a foreign key.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.ColumnAttribute.PropertyName">
      <summary>
The name of the property on the $LS$topic_000000000000013A$SL$$LE$Database Object$EL$.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.ColumnAttribute.PropertyType">
      <summary>
The type of the property on the $LS$topic_000000000000013A$SL$$LE$Database Object$EL$.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.ColumnAttribute.SqlDbTypes">
      <summary>
Valid SqlDbTypes that the column can populate.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Database.DatabaseObject">
      <summary>
Contains a collection of columns</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetInstance``1">
      <summary>
Gets the CLR class instance this DatabaseObject represents</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetInstance">
      <summary>
Gets the CLR class instance this DatabaseObject represents</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetColumnByPropertyName(System.String)">
      <summary>
Gets the column with the specified property name.</summary>
      <returns>
The column</returns>
      <param name="propertyName">
Name of the property.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetColumnByColumnName(System.String)">
      <summary>
Gets the column with the specified column name.</summary>
      <returns>
The column</returns>
      <param name="columnName">
Name of the column.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.TryGetColumnByPropertyName(System.String,WebApplications.Utilities.Database.Column@)">
      <summary>
Gets the column with the specified property name.</summary>
      <returns>
<c>True</c> if the column with the specified name was found; otherwise <c>false</c>.</returns>
      <param name="propertyName">
Name of the property.</param>
      <param name="column">
The column.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.TryGetColumnByColumnName(System.String,WebApplications.Utilities.Database.Column@)">
      <summary>
Gets the column with the specified column name.</summary>
      <returns>
<c>True</c> if the column with the specified name was found; otherwise <c>false</c>.</returns>
      <param name="propertyName">
Name of the property.</param>
      <param name="column">
The column.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.SetData(System.Data.SqlClient.SqlDataReader,System.Boolean)">
      <summary>
Sets the column values to thsoe found in the specified data reader.</summary>
      <param name="dataReader">
The data reader.</param>
      <param name="ignoreUnknownColumns">
if set to <c>true</c> ignores columns in the data reader that do not match columns in the object.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetSqlDataRecord(Microsoft.SqlServer.Server.SqlMetaData[])">
      <summary>
Get a Sql Data record where the column names match the meta data names.</summary>
      <returns>
The result of the conversion.</returns>
      <param name="sqlMetaData">
The SQL meta data that defines the record.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.PopulateSqlParameters(System.Data.SqlClient.SqlParameterCollection)">
      <summary>
Populates the SQL parameters from this collection.  Note the parameter names must be identical to the   column names (excluding the preceeding @ symbol).</summary>
      <param name="parameterCollection">
The parameter collection.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.PopulateSqlParameters(System.Data.SqlClient.SqlParameter[])">
      <summary>
Populates the SQL parameters.  Note the parameter names must be identical to the   column names (excluding the preceeding @ symbol).</summary>
      <param name="sqlParameters">
The SQL parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.PopulateSqlParameters(System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter})">
      <summary>
Populates the SQL parameters.  Note the parameter names must be identical to the   column names (excluding the preceeding @ symbol).</summary>
      <param name="sqlParameters">
The SQL parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.PopulateSqlParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.SqlClient.SqlParameter}})">
      <summary>
Populates the SQL parameters from the named columns.</summary>
      <param name="sqlParameters">
The SQL parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.PopulateSqlParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{WebApplications.Utilities.Database.Column,System.Data.SqlClient.SqlParameter}})">
      <summary>
Populates the SQL parameters from the specified columns.</summary>
      <param name="sqlParameters">
The SQL parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetSqlDataRecord(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.SqlServer.Server.SqlMetaData}})">
      <summary>
Get's a Sql Data record from the named columns.</summary>
      <returns>
The result of the conversion.</returns>
      <param name="sqlMetaData">
The SQL meta data that defines the record.</param>
    </member>
    <member name="P:WebApplications.Utilities.Database.DatabaseObject.PrimaryKeyColumns">
      <summary>
Gets the primary key columns.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.DatabaseObject.Item(System.String)">
      <summary>
Gets the $LS$topic_0000000000000113$SL$$LE$Column$EL$ with the specified property name.</summary>
      <param name="propertyName">
</param>
    </member>
    <member name="P:WebApplications.Utilities.Database.DatabaseObject.IsDirty">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.DatabaseObject.DatabaseObjectAttribute">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="T:WebApplications.Utilities.Database.DatabaseObjectAttribute">
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObjectAttribute.#ctor">
      <summary>
Initializes a new instance of the $LS$topic_000000000000013A$SL$$LE$DatabaseObjectAttribute$EL$ class, adds the object in question to the   assembly schema.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObjectAttribute.#ctor(System.String)">
      <summary>
Initializes a new instance of the $LS$topic_000000000000013A$SL$$LE$DatabaseObjectAttribute$EL$ class, adds the object in question to the   named schema.</summary>
      <param name="schemaName">
Name of the schema.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObjectAttribute.#ctor(System.String,System.String)">
      <summary>
Initializes a new instance of the $LS$topic_000000000000013A$SL$$LE$DatabaseObjectAttribute$EL$ class, adds the object in question to the   named schema.</summary>
      <param name="schemaName">
Name of the schema.</param>
      <param name="tableName">
Name of the table.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObjectAttribute.OnPropertyGet(PostSharp.Aspects.LocationInterceptionArgs)">
      <param name="args">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObjectAttribute.OnPropertySet(PostSharp.Aspects.LocationInterceptionArgs)">
      <param name="args">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObjectAttribute.CompileTimeInitialize(System.Type,PostSharp.Aspects.AspectInfo)">
      <summary>
Method invoked at build time to initialize the instance fields of the current aspect. This method is invoked   before any other build-time method.</summary>
      <param name="type">
Type to which the current aspect is applied</param>
      <param name="aspectInfo">
Reserved for future usage.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObjectAttribute.CreateInstance(PostSharp.Aspects.AdviceArgs)">
      <summary>
Creates a new instance of the aspect based on the current instance, serving as a prototype.</summary>
      <returns>
A new instance of the aspect, typically a clone of the current prototype instance.</returns>
      <param name="adviceArgs">
Aspect arguments.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObjectAttribute.RuntimeInitializeInstance">
      <summary>
Initializes the aspect instance. This method is invoked when all system elements of the aspect (like member imports)   have completed.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.DatabaseObjectAttribute.DataObjectType">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.DatabaseObjectAttribute.DatabaseObject">
      <summary>
Dictionary of columns by property name.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.DatabaseObjectAttribute.SchemaName">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.DatabaseObjectAttribute.TableName">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetFromInstance(System.Object)">
      <summary>
Gets the specified database object.</summary>
      <param name="databaseObject">
The database object.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetOrAddObject``2(``0)">
      <param name="keyValue1">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetOrAddObject``3(``0,``1)">
      <param name="keyValue1">
</param>
      <param name="keyValue2">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetOrAddObject``4(``0,``1,``2)">
      <param name="keyValue1">
</param>
      <param name="keyValue2">
</param>
      <param name="keyValue3">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetOrAddObject``5(``0,``1,``2,``3)">
      <param name="keyValue1">
</param>
      <param name="keyValue2">
</param>
      <param name="keyValue3">
</param>
      <param name="keyValue4">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetOrAddObjectOfType(System.Type,System.Object[])">
      <param name="objectType">
</param>
      <param name="keyValues">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.GetOrAddDatabaseObject(System.Type,System.Object[])">
      <param name="objectType">
</param>
      <param name="keyValues">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.IsDatabaseObject(System.Object)">
      <summary>
Determines whether an object is a database object.</summary>
      <returns>
<c>true</c> if object is a database object and not null; otherwise, <c>false</c>.</returns>
      <param name="instance">
The instance.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.DatabaseObject.IsDatabaseObjectType(System.Type)">
      <summary>
Determines whether a type is a database object.</summary>
      <returns>
<c>true</c> if object is a database object; otherwise, <c>false</c>.</returns>
      <param name="objectType">
Type of the object.</param>
    </member>
    <member name="P:WebApplications.Utilities.Database.IDatabaseObject.DatabaseObject">
      <summary>
Gets or sets the database columns.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Database.SqlConversionMethodAttribute">
      <summary>
Method supplies a conversion</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlConversionMethodAttribute.#ctor">
      <summary>
Initializes a new instance of the $LS$topic_0000000000000151$SL$$LE$SqlConversionMethodAttribute$EL$ class.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlConversionMethodAttribute.#ctor(System.Boolean)">
      <summary>
Initializes a new instance of the $LS$topic_0000000000000151$SL$$LE$SqlConversionMethodAttribute$EL$ class.</summary>
      <param name="potentialOverflow">
if set to <c>true</c> [potential overflow].</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlConversionMethodAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>
Initializes a new instance of the $LS$topic_0000000000000151$SL$$LE$SqlConversionMethodAttribute$EL$ class.</summary>
      <param name="potentialOverflow">
if set to <c>true</c> [potential overflow].</param>
      <param name="isDefaultConversion">
if set to <c>true</c> [is default conversion].</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlConversionMethodAttribute.CompileTimeInitialize(System.Reflection.MethodBase,PostSharp.Aspects.AspectInfo)">
      <summary>
Method invoked at build time to initialize the instance fields of the current aspect. This method is invoked   before any other build-time method.</summary>
      <param name="method">
Method to which the current aspect is applied</param>
      <param name="aspectInfo">
Reserved for future usage.</param>
    </member>
    <member name="P:WebApplications.Utilities.Database.SqlConversionMethodAttribute.MethodInfo">
      <summary>
Gets or sets the method info.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.SqlConversionMethodAttribute.ConversionFunction">
      <summary>
Converts the method info into a much faster lambda expression for runtime speed, checks the type constraints.</summary>
      <value>
A lambda function representing the method info call.</value>
    </member>
    <member name="P:WebApplications.Utilities.Database.SqlConversionMethodAttribute.DestinationType">
      <summary>
Gets or sets the type of the destination.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Database.SqlConversionMethodAttribute.SourceType">
      <summary>
Gets or sets the type of the source.</summary>
    </member>
    <member name="N:WebApplications.Utilities.Database.SqlTypeConverters">
    </member>
    <member name="T:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter">
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.BooleanToSqlBoolean(System.Boolean,System.Data.SqlTypes.SqlBoolean,System.Boolean)">
      <param name="value">
If set to <see langword="true" />, then ; otherwise, .</param>
      <param name="nullValue">
</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.SqlBooleanToBoolean(System.Data.SqlTypes.SqlBoolean,System.Boolean,System.Boolean)">
      <param name="value">
</param>
      <param name="nullValue">
If set to <see langword="true" />, then ; otherwise, .</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.BooleanToSqlByte(System.Boolean,System.Data.SqlTypes.SqlByte,System.Boolean)">
      <param name="value">
If set to <see langword="true" />, then ; otherwise, .</param>
      <param name="nullValue">
</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.SqlByteToBoolean(System.Data.SqlTypes.SqlByte,System.Boolean,System.Boolean)">
      <param name="value">
</param>
      <param name="nullValue">
If set to <see langword="true" />, then ; otherwise, .</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.GuidToSqlGuid(System.Guid,System.Data.SqlTypes.SqlGuid,System.Boolean)">
      <param name="value">
</param>
      <param name="nullValue">
</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.SqlGuidGuid(System.Data.SqlTypes.SqlGuid,System.Guid,System.Boolean)">
      <param name="value">
</param>
      <param name="nullValue">
</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.NullableGuidToSqlGuid(System.Nullable{System.Guid},System.Data.SqlTypes.SqlGuid,System.Boolean)">
      <param name="value">
</param>
      <param name="nullValue">
</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.SqlGuidNullableGuid(System.Data.SqlTypes.SqlGuid,System.Nullable{System.Guid},System.Boolean)">
      <param name="value">
</param>
      <param name="nullValue">
</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.Int32ToSqlInt32(System.Int32,System.Data.SqlTypes.SqlInt32,System.Boolean)">
      <param name="value">
</param>
      <param name="nullValue">
</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.SqlInt32ToInt32(System.Data.SqlTypes.SqlInt32,System.Int32,System.Boolean)">
      <param name="value">
</param>
      <param name="nullValue">
</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.StringSqlString(System.String,System.Data.SqlTypes.SqlString,System.Boolean)">
      <param name="value">
</param>
      <param name="nullValue">
</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.SqlStringString(System.Data.SqlTypes.SqlString,System.String,System.Boolean)">
      <param name="value">
</param>
      <param name="nullValue">
</param>
      <param name="allowNull">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.CanConvert(System.Type,System.Type)">
      <summary>
Determines whether the specified source type can be converted to the destination type.</summary>
      <returns>
<c>true</c> if the specified source type can be converted; otherwise, <c>false</c>.</returns>
      <param name="sourceType">
Type of the source.</param>
      <param name="destinationType">
Type of the destination, <c>null</c> for default destination type.</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.DefaultConvert(System.Object,System.Object,System.Boolean)">
      <summary>
Converts the specified source value to the default destination type.</summary>
      <returns>
Converted value.</returns>
      <param name="sourceValue">
The source value.</param>
      <param name="nullValue">
The value to use if the source is <c>null</c> or a SQL null value.</param>
      <param name="allowNulls">
if set to <c>true</c> [allow nulls].</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.DefaultConvert``1(``0,System.Object,System.Boolean)">
      <summary>
Converts the specified source value to the default destination type.</summary>
      <returns>
Converted value.</returns>
      <param name="sourceValue">
The source value.</param>
      <param name="nullValue">
The value to use if the source is <c>null</c> or a SQL null value.</param>
      <param name="allowNulls">
if set to <c>true</c> [allow nulls].</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.Convert(System.Object,System.Type,System.Object,System.Boolean)">
      <summary>
Converts the specified source value to the destination type.</summary>
      <returns>
Converted value.</returns>
      <param name="sourceValue">
The source value.</param>
      <param name="destinationType">
Type of the destination.</param>
      <param name="nullValue">
The value to use if the source is <c>null</c> or a SQL null value.</param>
      <param name="allowNulls">
if set to <c>true</c> [allow nulls].</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.Convert(System.Object,System.Type,System.Type,System.Object,System.Boolean)">
      <summary>
Converts the specified source value to the destination type.</summary>
      <returns>
Converted value.</returns>
      <param name="sourceValue">
The source value.</param>
      <param name="sourceType">
Type of the source.</param>
      <param name="destinationType">
Type of the destination.</param>
      <param name="nullValue">
The value to use if the source is <c>null</c> or a SQL null value.</param>
      <param name="allowNulls">
if set to <c>true</c> [allow nulls].</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.Convert``2(``0,``1,System.Boolean)">
      <summary>
Converts the specified source value to the destination type.</summary>
      <returns>
Converted value.</returns>
      <param name="sourceValue">
The source value.</param>
      <param name="nullValue">
The value to use if the source is <c>null</c> or a SQL null value.</param>
      <param name="allowNulls">
if set to <c>true</c> [allow nulls].</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.TryDefaultConvert(System.Object,System.Object@,System.Object,System.Boolean)">
      <summary>
Converts the specified source value to the default destination type.</summary>
      <returns>
<c>true</c> if conversion succeeded; otherwise <c>false</c>.</returns>
      <param name="sourceValue">
The source value.</param>
      <param name="destinationValue">
The destination value.</param>
      <param name="nullValue">
The value to use if the source is <c>null</c> or a SQL null value.</param>
      <param name="allowNulls">
if set to <c>true</c> [allow nulls].</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.TryDefaultConvert``1(``0,System.Object@,System.Object,System.Boolean)">
      <summary>
Converts the specified source value to the default destination type.</summary>
      <returns>
<c>true</c> if conversion succeeded; otherwise <c>false</c>.</returns>
      <param name="sourceValue">
The source value.</param>
      <param name="destinationValue">
The destination value.</param>
      <param name="nullValue">
The value to use if the source is <c>null</c> or a SQL null value.</param>
      <param name="allowNulls">
if set to <c>true</c> [allow nulls].</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.TryConvert(System.Object,System.Type,System.Object@,System.Object,System.Boolean)">
      <summary>
Converts the specified source value to the destination type.</summary>
      <returns>
<c>true</c> if conversion succeeded; otherwise <c>false</c>.</returns>
      <param name="sourceValue">
The source value.</param>
      <param name="destinationType">
Type of the destination.</param>
      <param name="destinationValue">
The destination value.</param>
      <param name="nullValue">
The value to use if the source is <c>null</c> or a SQL null value.</param>
      <param name="allowNulls">
if set to <c>true</c> [allow nulls].</param>
    </member>
    <member name="M:WebApplications.Utilities.Database.SqlTypeConverters.SqlTypeConverter.TryConvert``2(``0,``1@,``1,System.Boolean)">
      <summary>
Converts the specified source value to the destination type.</summary>
      <returns>
<c>true</c> if conversion succeeded; otherwise <c>false</c>.</returns>
      <param name="sourceValue">
The source value.</param>
      <param name="destinationValue">
The destination value.</param>
      <param name="nullValue">
The value to use if the source is <c>null</c> or a SQL null value.</param>
      <param name="allowNulls">
if set to <c>true</c> [allow nulls].</param>
    </member>
  </members>
</doc>
