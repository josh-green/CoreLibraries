<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="scheduler" type="WebApplications.Utilities.Scheduling.Configuration.SchedulerConfiguration, WebApplications.Utilities.Scheduling" />
  </configSections>
  <scheduler>
    <!--
    The following attributes can be added to the scheduler node, all are optional:
        enabled="true"                            If set to false will disable running of schedules items (defaults to 'true')
        defautlMaximumHistory="100"               The default number of history items to store on schedule runs (defaults to '100')
        defaultMaximumDuration="00:10:00"         The default maximum duration given to an action/function to run (defaults to 10 mins)

    To add any named schedules then you need to add a schedules subnode:
      <schedules>
      </schedules>
    
    Inside this node, you can clear, add and remove named schedules, for example:
      <add name="OneOff" type="WebApplications.Utilities.Scheduling.Schedules.OneOffSchedule, WebApplications.Utilities.Scheduling">
        <parameters>
          <add name="dateTime" value="2100/01/13 09:10:11.123456 +00:00" />
        </parameters>
      </add>
    
    This adds a schedule named 'OneOff' which uses the 'OneOfSchedule' type, which is included in the Scheduling dll (you can add your own by
    implementing the ISchedule interface.  The OneOffSchedule accepts a 'dateTime' parameter, where the value is a DateTimeOffset.  Alternatively,
    you can supply a local date time, and an additional 'timeZone' parameter:    
      <add name="OneOff" type="WebApplications.Utilities.Scheduling.Schedules.OneOffSchedule, WebApplications.Utilities.Scheduling">
        <parameters>
          <add name="dateTime" value="2100/01/13 09:10:11.123456 +00:00" />
          <add name="timeZone" value="Europe/London"/>
        </parameters>
      </add>    
    
    Also provided is the 'GapSchedule', which will run after a minimum gap:
      <add name="Gap" type="WebApplications.Utilities.Scheduling.Schedules.GapSchedule, WebApplications.Utilities.Scheduling"
        options="FromDue, AlignHours">
        <parameters>
          <add name="timeSpan" value="3.12:00:00" />
        </parameters>
      </add>
    
    This runs every 3 and a half days, always running on the start of an hour.  The 'options' parameter is available on all schedules, see the
    'ScheduleOptions' enumeration for more infomration.  By default schedules calculate the next execution based on when the last execution finished
    the 'FromDue' option calculates the next due based on when the last execution was due to start (which is normally very slightly before when it actually
    started).
    
    This most powerful builtin schedule is the PeriodicSchedule:
      <add name="EveryTwoMonths" type="WebApplications.Utilities.Scheduling.Schedules.PeriodicSchedule, WebApplications.Utilities.Scheduling">
        <parameters>
          <add name="month" value="EveryTwoMonths" />
          <add name="day" value="First" />
          <add name="hour" value="Third" />
          <add name="minimumTimeSpan" value="00:00:02"/>
          <add name="calendar" value="Gregorian 4"/>
          <add name="timeZone" value="Europe/London"/>
        </parameters>
      </add>
      
    This example runs at 3o'clock in the morning (GMT) on the 1st day of January, March, May, July, September and November; according to the
    Gregorian calendar (where week 1 has at least four days in it).  All parameters are optional, and the calendar defaults to 'ISO', and timeZone
    defaults to 'UTC'.  The hour, minute and second all default to Zeroth, and the month, week, day and weekDay all default to 'Every', meaning that
    the default PeriodicSchedule runs at midnight (UTC) every day.
    
    The final bultin schedule is the AggregateSchedule:
      <add name="Aggregate" type="WebApplications.Utilities.Scheduling.Schedules.AggregateSchedule, WebApplications.Utilities.Scheduling">
        <parameters>
          <add name="schedule1" value="OneOff" />
          <add name="schedule2" value="Gap" />
          <add name="schedule3" value="EveryTwoMonths" />
        </parameters>
      </add>
      
    This groups all the named schedules together.  You can group up to 32 schedules (using the 'schedule#' paramters).  Due to the nature of the
    Scheduling system, ALL named schedules in an aggregate schedule must have the same options.  Using aggregate schedules allows for incredibly
    flexible schedules to be created.
    -->
  </scheduler>
</configuration>