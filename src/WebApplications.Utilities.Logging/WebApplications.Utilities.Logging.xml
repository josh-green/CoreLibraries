<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>WebApplications.Utilities.Logging</name>
  </assembly>
  <members>
    <member name="N:WebApplications.Utilities.Logging.Performance">
    </member>
    <member name="N:WebApplications.Utilities.Logging.Configuration">
    </member>
    <member name="T:WebApplications.Utilities.Logging.Configuration.LoggerElement">
      <summary>
A logger element from a configuration file.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggerElement.ValidLevels">
      <summary>
Gets the valid <see cref="LogLevels">logging levels</see>.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggerElement.Type">
      <summary>
Gets or sets the logger type.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggerElement.Enabled">
      <summary>
Gets a value indicating whether logging is enabled.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggerElement.Name">
      <summary>
Gets or sets the logger name.</summary>
    </member>
    <member name="N:WebApplications.Utilities.Logging.Loggers">
    </member>
    <member name="T:WebApplications.Utilities.Logging.Loggers.MemoryLogger">
      <summary>
A logger that stores logs solely in memory. Is used by the core logger to hold log items temporarily, and for caching.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.MemoryLogger.#ctor(System.String,System.TimeSpan,System.Int32,WebApplications.Utilities.Logging.LogLevels)">
      <summary>
Initializes a new instance of the <see cref="MemoryLogger" /> class.</summary>
      <param name="name">
The logger name.</param>
      <param name="cacheExpiry">
<para>The length of time that log items are cached for.</para> <para>Use <see cref="TimeSpan.Zero" /> for infinity.</para> <para>By default the expiry will be set to 10 minutes.</para></param>
      <param name="maximumLogEntries">
<para>The maximum number of log entries to store.</para> <para>By default this is set to 10,000.</para></param>
      <param name="validLevels">
<para>The valid log levels.</para> <para>By default this is set allow all <see cref="LogLevels">all log levels</see>.</para></param>
      <exception cref="LoggingException">
<para><paramref name="maximumLogEntries" /> was less than 1.</para> <para>-or-</para> <para><paramref name="cacheExpiry" /> cannot be less than 10 seconds.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.MemoryLogger.Add(WebApplications.Utilities.Logging.Log)">
      <summary>
Adds the specified log to the cache.</summary>
      <param name="log">
The log to add.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.MemoryLogger.Get(System.DateTime,System.Int32)">
      <summary>
Gets all of the logs from the end date backwards up to the specified limit.</summary>
      <returns>
The retrieved logs in reverse date order, the first being the newest log before the <paramref name="endDate" />.</returns>
      <param name="endDate">
The last date to get logs up to (exclusive).</param>
      <param name="limit">
The maximum number of logs to retrieve.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.MemoryLogger.Get(System.DateTime,System.DateTime)">
      <summary>
Gets all of the logs from the end date backwards up to the start date.</summary>
      <returns>
The retrieved logs in reverse date order, the first being the newest log before the <paramref name="endDate" /> and the last being the first log after the <paramref name="startDate" />.</returns>
      <param name="endDate">
The last date to get logs from (exclusive).</param>
      <param name="startDate">
The start date to get logs up to (inclusive).</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.MemoryLogger.GetForward(System.DateTime,System.Int32)">
      <summary>
Gets all of the logs from the start date forwards up to the specified limit.</summary>
      <returns>
The retrieved logs starting from the <paramref name="startDate" /> up to the specified <paramref name="limit" />.</returns>
      <param name="startDate">
The start date to get logs from (inclusive).</param>
      <param name="limit">
The maximum number of logs to retrieve.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.MemoryLogger.GetForward(System.DateTime,System.DateTime)">
      <summary>
Gets all of the logs from the start date forwards up to the end date. By default this calls the Get method and reverses, override in classes where reversal can be done when retrieving from storage.</summary>
      <returns>
All of the retrieved logs from the <paramref name="startDate" /> to the <paramref name="endDate" />.</returns>
      <param name="startDate">
The start date to get logs from (inclusive).</param>
      <param name="endDate">
The last date to get logs to (exclusive).</param>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Loggers.MemoryLogger.CachingFrom">
      <summary>
Gets the time which marks when the log is caching from.</summary>
    </member>
    <member name="N:WebApplications.Utilities.Logging">
    </member>
    <member name="T:WebApplications.Utilities.Logging.Extensions">
      <summary>
Extension methods for logging.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Extensions.IsValid(WebApplications.Utilities.Logging.LogLevel,WebApplications.Utilities.Logging.LogLevels)">
      <summary>
Returns a <see cref="bool" /> value indicating whether the specified <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see> is within the valid <see cref="LogLevels">levels</see>.</summary>
      <returns>
Returns <c>true</c> if the specified <paramref name="level" /> is within the <paramref name="validLevels" />; provided; otherwise returns <c>false</c>.</returns>
      <param name="level">
The level.</param>
      <param name="validLevels">
The valid levels.</param>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Performance.PerformanceCounter">
      <summary>
Performance counters used for operations.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Performance.PerformanceCounter.#ctor(System.String)">
      <summary>
Initializes a new instance of <see cref="PerformanceCounter" />.</summary>
      <param name="categoryName">
The performance counter's category name.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Performance.PerformanceCounter.Dispose">
    </member>
    <member name="T:WebApplications.Utilities.Logging.Performance.PerformanceTimer">
      <summary>
Times an operation using a performance timer.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Performance.PerformanceTimer.#ctor(System.String)">
      <summary>
Initializes a new instance of the <see cref="PerformanceTimer" /> class.</summary>
      <param name="categoryName">
Name of the category.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Performance.PerformanceTimer.#ctor(System.String,System.TimeSpan)">
      <summary>
Initializes a new instance of the <see cref="PerformanceTimer" /> class.</summary>
      <param name="categoryName">
The name of the category.</param>
      <param name="warningDuration">
The duration of time that the operation should take before logging a warning.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Performance.PerformanceTimer.#ctor(System.String,System.TimeSpan,System.TimeSpan)">
      <summary>
Initializes a new instance of the <see cref="PerformanceTimer" /> class.</summary>
      <param name="categoryName">
The name of the category.</param>
      <param name="warningDuration">
The duration of time that the operation should take before logging a warning.</param>
      <param name="criticalDuration">
The duration of time that the operation should take before logging an error.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Performance.PerformanceTimer.Stop">
      <summary>
Stops the <see cref="PerformanceTimer" />.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Performance.PerformanceTimer.Dispose">
      <summary>
Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Loggers.SqlLogger">
      <summary>
Implements a logger that logs to a database.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.SqlLogger.#ctor(System.String,System.String,WebApplications.Utilities.Logging.LogLevels,System.TimeSpan,System.TimeSpan)">
      <summary>
Initializes a new instance of the <see cref="SqlLogger" /> class.</summary>
      <param name="name">
The logger name.</param>
      <param name="connectionString">
The connection string.</param>
      <param name="validLevels">
<para>The valid log levels.</para> <para>By default this is allows <see cref="LogLevels">all log levels</see>.</para></param>
      <param name="sqlTimeout">
<para>The time to wait (in seconds) for SQL commands.</para> <para>By default this is set to 120 seconds.</para></param>
      <param name="expireAfter">
<para>The amount of time to leave a log on the database.</para> <para>By default this is set to 3 days.</para></param>
      <exception cref="LoggingException">
<para><paramref name="connectionString" /> is <see cref="string.IsNullOrWhiteSpace">is null or whitespace</see>.</para> <para>-or-</para> <para><paramref name="sqlTimeout" /> was less than 1 second.</para> <para>-or-</para> <para><paramref name="expireAfter" /> cannot be less than 1 second.</para> <para>-or-</para> <para>The service failed to register.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.SqlLogger.Add(WebApplications.Utilities.Logging.Log)">
      <summary>
Adds the specified log to the db in time order.</summary>
      <param name="log">
The log to add.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.SqlLogger.Add(System.Collections.Generic.IEnumerable{WebApplications.Utilities.Logging.Log})">
      <summary>
Adds the specified logs to the db in time order.</summary>
      <param name="logs">
The logs to add.</param>
    </member>
    <member name="T:WebApplications.Utilities.Logging.LogLevels">
      <summary>
Allows the specification of multiple <see cref="WebApplications.Utilities.Logging.LogLevel">log levels</see>.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.All">
      <summary>
All Levels.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.None">
      <summary>
No Levels.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.AtLeastCritical">
      <summary>
At least critical.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.AtLeastError">
      <summary>
At least an error.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.AtLeastWarning">
      <summary>
At least a warning.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.AtLeastSystemNotification">
      <summary>
At least a system notification.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.AtLeastNotification">
      <summary>
At least a notification.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.AtLeastInformation">
      <summary>
At least information.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.Emergency">
      <summary>
Used for critical, unrecoverable errors that can cause damage. The system should be stopped immediately.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.Critical">
      <summary>
Used for critical, unrecoverable errors that don't cause damage. You should stop the system and repair the error, but it may be capable of continuing in some capacity.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.Error">
      <summary>
Used for errors.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.Warning">
      <summary>
Used to indicate potential problems that should be addressed.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.SystemNotification">
      <summary>
Used by system to notify key events.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.Notification">
      <summary>
Used by modules to notify key events.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.Information">
      <summary>
Informational use.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevels.Debugging">
      <summary>
Debugging information.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Loggers.LoggerBase">
      <summary>
A logger base class that implements log storage and retrieval.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.LoggerBase.Add(WebApplications.Utilities.Logging.Log)">
      <summary>
Adds the specified log to storage in time order.</summary>
      <param name="log">
The log to add to storage.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.LoggerBase.Add(System.Collections.Generic.IEnumerable{WebApplications.Utilities.Logging.Log})">
      <summary>
Adds the specified logs to storage in time order. This can be overridden in the default class to bulk store items in one call (e.g. to a database), the inbuilt logger will always use this method where possible for efficiency. By default it calls the standard Add method repeatedly.</summary>
      <param name="logs">
The logs to add to storage.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.LoggerBase.Get(System.DateTime,System.Int32)">
      <summary>
Gets all of the logs from the end date backwards up to the specified limit.</summary>
      <returns>
The retrieved logs in reverse date order, the first being the newest log before the <paramref name="endDate" />.</returns>
      <param name="endDate">
The last date to get logs up to (exclusive).</param>
      <param name="limit">
The maximum number of logs to retrieve.</param>
      <exception cref="LoggingException">
<para>The logger does not implement Get.</para> <para>-or-</para> <para>The logger does not support <see cref="LoggerBase.CanRetrieve">log retrieval</see>.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.LoggerBase.Get(System.DateTime,System.DateTime)">
      <summary>
Gets all of the logs from the end date backwards up to the start date.</summary>
      <returns>
The retrieved logs in reverse date order, the first being the newest log before the <paramref name="endDate" /> and the last being the first log after the <paramref name="startDate" />.</returns>
      <param name="endDate">
The last date to get logs from (exclusive).</param>
      <param name="startDate">
The start date to get logs up to (inclusive).</param>
      <exception cref="LoggingException">
<para>The logger does not implement Get.</para> <para>-or-</para> <para>The logger does not support <see cref="LoggerBase.CanRetrieve">log retrieval</see>.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.LoggerBase.GetForward(System.DateTime,System.Int32)">
      <summary>
Gets all of the logs from the start date forwards up to the specified limit.</summary>
      <returns>
The retrieved logs starting from the <paramref name="startDate" /> up to the specified <paramref name="limit" />.</returns>
      <param name="startDate">
The start date to get logs from (inclusive).</param>
      <param name="limit">
The maximum number of logs to retrieve.</param>
      <exception cref="LoggingException">
<para>The logger does not implement Get.</para> <para>-or-</para> <para>The logger does not support <see cref="LoggerBase.CanRetrieve">log retrieval</see>.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.LoggerBase.GetForward(System.DateTime,System.DateTime)">
      <summary>
Gets all of the logs from the start date forwards up to the end date. If not overridden, and <see cref="LoggerBase.CanRetrieve">retrieval</see> is supported, this will reverse the results of the normal get method.</summary>
      <returns>
All of the retrieved logs from the <paramref name="startDate" /> to the <paramref name="endDate" />.</returns>
      <param name="startDate">
The start date to get logs from (inclusive).</param>
      <param name="endDate">
The last date to get logs to (exclusive).</param>
      <exception cref="LoggingException">
<para>The logger does not implement Get.</para> <para>-or-</para> <para>The logger does not support <see cref="LoggerBase.CanRetrieve">log retrieval</see>.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.LoggerBase.Flush">
      <summary>
Flushes the logger, this should be overridden in classes that require Flush logic.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.LoggerBase.Dispose">
      <summary>
Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Loggers.LoggerBase.Name">
      <summary>
Gets the logger name.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Loggers.LoggerBase.ValidLevels">
      <summary>
The valid <see cref="LogLevels" /> for this logger</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Loggers.LoggerBase.CanRetrieve">
      <summary>
A <see cref="bool" /> value indicating whether the logger can retrieve historic logs.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.LogLevel">
      <summary>
The severity of a Log Entry.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevel.Emergency">
      <summary>
Used for critical, unrecoverable errors that can cause damage. The system should be stopped immediately.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevel.Critical">
      <summary>
Used for critical, unrecoverable errors that don't cause damage. You should stop the system and repair the error, but it may be capable of continuing in some capacity.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevel.Error">
      <summary>
Used for errors.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevel.Warning">
      <summary>
Used to indicate potential problems that should be addressed.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevel.SystemNotification">
      <summary>
Used by system to notify key events.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevel.Notification">
      <summary>
Used by modules to notify key events.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevel.Information">
      <summary>
Informational use.</summary>
    </member>
    <member name="F:WebApplications.Utilities.Logging.LogLevel.Debugging">
      <summary>
Debugging information.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Loggers.FileLogger">
      <summary>
A logger that implements logging to files.</summary>
      <remarks>
TODO It should be possible to turn this into a logger that sets <see cref="ILogger.CanRetrieve" /> to <see langword="true" />. That is that supports log retrieval.</remarks>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.FileLogger.#ctor(System.String,System.String,System.Int64,System.TimeSpan,WebApplications.Utilities.Logging.LogLevels,System.String,System.String)">
      <summary>
Initializes a new instance of the <see cref="FileLogger" /> class.</summary>
      <param name="name">
The filename.</param>
      <param name="directory">
The directory to log to.</param>
      <param name="maxLog">
<para>The maximum number of log items in a single log file.</para> <para>By default this is set to 1,000.</para></param>
      <param name="maxDuration">
The maximum time period that a single log file can cover.</param>
      <param name="validLevels">
<para>The valid log levels.</para> <para>By default allows <see cref="LogLevels">all log levels</see>.</para></param>
      <param name="format">
<para>The filename format - where {DateTime} is the creation date time.</para> <para>By default the format is "{ApplicationName}-{DateTime:yyMMddHHmmssffff}".</para></param>
      <param name="extension">
<para>The file extension.</para> <para>By default this is set to use "log".</para></param>
      <exception cref="LoggingException">
<para><paramref name="maxLog" /> was less than 10, which would result in too many log files to be created.</para> <para>-or-</para> <para><paramref name="maxDuration" /> was less than 10 seconds, which would result in too many log files to be created.</para> <para>-or-</para> <para><paramref name="directory" /> was either <see cref="string.IsNullOrWhiteSpace">null or whitespace</see>.</para> <para>-or-</para> <para>The <paramref name="format" /> string was either <see cref="string.IsNullOrWhiteSpace">null or whitespace</see>.</para> <para>-or-</para> <para>An error occurred trying to access the <paramref name="directory" />.</para> <para>-or-</para> <para><paramref name="extension" /> was more than 5 characters long.</para> <para>-or-</para> <para>The <paramref name="format" /> led to an invalid path or created a path that references the wrong <paramref name="directory" />.</para> <para>-or-</para> <para>File path contained <see cref="Path.GetInvalidPathChars">invalid characters</see>.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.FileLogger.Dispose">
      <summary>
Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.FileLogger.Add(WebApplications.Utilities.Logging.Log)">
      <summary>
Adds the specified log to the log file in time order.</summary>
      <param name="log">
The log to write to the file.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.FileLogger.Add(System.Collections.Generic.IEnumerable{WebApplications.Utilities.Logging.Log})">
      <summary>
Adds the specified logs to storage in time order. This can be overridden in the default class to bulk store items in one call (e.g. to a database), the inbuilt logger will always use this method where possible for efficiency. By default it calls the standard Add method repeatedly.</summary>
      <param name="logs">
The logs to write the log file.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.FileLogger.Flush">
      <summary>
Flushes the logs to disk.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Logger">
      <summary>
A base class for classes that implement a logger that can persist logs.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Logger.Add(System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Adds a log at the specified <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see>.</summary>
      <param name="message">
The message to log.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Logger.Add(System.Guid,System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Adds a log at the specified <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see>.</summary>
      <param name="logGroup">
The unique ID to group log items together.</param>
      <param name="message">
The message.</param>
      <param name="level">
The level.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="N:WebApplications.Utilities.Logging.Interfaces">
    </member>
    <member name="T:WebApplications.Utilities.Logging.Interfaces.ILogger">
      <summary>
Provides an interface for loggers.</summary>
      <remarks>
For a head start use <see cref="LoggerBase" />, which already implements a number of these methods.</remarks>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Interfaces.ILogger.Add(WebApplications.Utilities.Logging.Log)">
      <summary>
Adds the specified log to storage in time order.</summary>
      <param name="log">
The log to add to storage.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Interfaces.ILogger.Add(System.Collections.Generic.IEnumerable{WebApplications.Utilities.Logging.Log})">
      <summary>
Adds the specified logs to storage in time order. This can be overridden in the default class to bulk store items in one call (e.g. to a database), the inbuilt logger will always use this method where possible for efficiency. By default it calls the standard Add method repeatedly.</summary>
      <param name="logs">
The logs to add to storage.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Interfaces.ILogger.Get(System.DateTime,System.Int32)">
      <summary>
Gets all of the logs from the end date backwards up to the specified limit.</summary>
      <returns>
The retrieved logs in reverse date order, the first being the newest log before the <paramref name="endDate" />.</returns>
      <param name="endDate">
The last date to get logs up to (exclusive).</param>
      <param name="limit">
The maximum number of logs to retrieve.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Interfaces.ILogger.Get(System.DateTime,System.DateTime)">
      <summary>
Gets all of the logs from the end date backwards up to the start date.</summary>
      <returns>
The retrieved logs in reverse date order, the first being the newest log before the <paramref name="endDate" /> and the last being the first log after the <paramref name="startDate" />.</returns>
      <param name="endDate">
The last date to get logs from (exclusive).</param>
      <param name="startDate">
The start date to get logs up to (inclusive).</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Interfaces.ILogger.GetForward(System.DateTime,System.Int32)">
      <summary>
Gets all of the logs from the start date forwards up to the specified limit.</summary>
      <returns>
The retrieved logs starting from the <paramref name="startDate" /> up to the specified <paramref name="limit" />.</returns>
      <param name="startDate">
The start date to get logs from (inclusive).</param>
      <param name="limit">
The maximum number of logs to retrieve.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Interfaces.ILogger.GetForward(System.DateTime,System.DateTime)">
      <summary>
Gets all of the logs from the start date forwards up to the end date. If not overridden, and <see cref="ILogger.CanRetrieve">retrieval</see> is supported, then it will reverse the results of the normal get method.</summary>
      <returns>
All of the retrieved logs from the <paramref name="startDate" /> to the <paramref name="endDate" />.</returns>
      <param name="startDate">
The start date to get logs from (inclusive).</param>
      <param name="endDate">
The last date to get logs to (exclusive).</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Interfaces.ILogger.Flush">
      <summary>
Flushes the logger.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Interfaces.ILogger.ValidLevels">
      <summary>
The valid <see cref="LogLevels">log levels</see> for this log level.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Interfaces.ILogger.CanRetrieve">
      <summary>
A <see cref="bool" /> value indicating whether the logger can retrieve historic logs.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Interfaces.ILogger.Name">
      <summary>
Gets the logger name.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Operation">
      <summary>
An operation contains details of the currently executing command against a stack.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Operation.Wrap(System.Action,System.String,System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.TimeSpan,System.TimeSpan,System.Boolean)">
      <summary>
Wraps the specified <see cref="Action" /> in an <see cref="Operation" />.</summary>
      <param name="action">
The action to wrap.</param>
      <param name="name">
The name of the operation.</param>
      <param name="categoryName">
<para>The name of the category used by performance counters</para> <para>By default uses the <paramref name="name" />.</para></param>
      <param name="methodName">
<para>The name of the method.</para> <para>By default uses the <paramref name="name" /></para>.</param>
      <param name="instance">
<para>The instance that the operation is started on.</para> <para>By default the value is a <see langword="null" />.</para></param>
      <param name="arguments">
The operation arguments.</param>
      <param name="warningDuration">
<para>The maximum duration before logging a warning.</para> <para>By default this is <see cref="TimeSpan.MaxValue" />.</para></param>
      <param name="criticalDuration">
<para>The maximum duration before logging an error.</para> <para>By default this is <see cref="TimeSpan.MaxValue" />.</para></param>
      <param name="logUnhandledExceptions">
If set to <c>true</c> log unhandled exceptions that are not <see cref="LoggingException" />s.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Operation.Wrap(System.Action{WebApplications.Utilities.Logging.Operation},System.String,System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.TimeSpan,System.TimeSpan,System.Boolean)">
      <summary>
Wraps the specified <see cref="Action" /> in an <see cref="Operation" />.</summary>
      <param name="action">
The action to wrap.</param>
      <param name="name">
The name of the operation.</param>
      <param name="categoryName">
<para>The name of the category used by performance counters</para> <para>By default uses the <paramref name="name" />.</para></param>
      <param name="methodName">
<para>The name of the method.</para> <para>By default uses the <paramref name="name" /></para>.</param>
      <param name="instance">
<para>The instance that the operation is started on.</para> <para>By default the value is a <see langword="null" />.</para></param>
      <param name="arguments">
The operation arguments.</param>
      <param name="warningDuration">
<para>The maximum duration before logging a warning.</para> <para>By default this is <see cref="TimeSpan.MaxValue" />.</para></param>
      <param name="criticalDuration">
<para>The maximum duration before logging an error.</para> <para>By default this is <see cref="TimeSpan.MaxValue" />.</para></param>
      <param name="logUnhandledExceptions">
If set to <c>true</c> log unhandled exceptions that are not <see cref="LoggingException" />s.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Operation.Wrap``1(System.Func{``0},System.String,System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.TimeSpan,System.TimeSpan,System.Boolean)">
      <summary>
Wraps the specified function in an <see cref="Operation" />.</summary>
      <returns>
The result of the action.</returns>
      <param name="function">
The function to wrap.</param>
      <param name="name">
The name of the operation.</param>
      <param name="categoryName">
<para>The name of the category used by performance counters</para> <para>By default uses the <paramref name="name" />.</para></param>
      <param name="methodName">
<para>The name of the method.</para> <para>By default uses the <paramref name="name" /></para>.</param>
      <param name="instance">
<para>The instance that the operation is started on.</para> <para>By default the value is a <see langword="null" />.</para></param>
      <param name="arguments">
The operation arguments.</param>
      <param name="warningDuration">
<para>The maximum duration before logging a warning.</para> <para>By default this is <see cref="TimeSpan.MaxValue" />.</para></param>
      <param name="criticalDuration">
<para>The maximum duration before logging an error.</para> <para>By default this is <see cref="TimeSpan.MaxValue" />.</para></param>
      <param name="logUnhandledExceptions">
If set to <c>true</c> log unhandled exceptions that are not <see cref="LoggingException" />s.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Operation.Wrap``1(System.Func{WebApplications.Utilities.Logging.Operation,``0},System.String,System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.TimeSpan,System.TimeSpan,System.Boolean)">
      <summary>
Wraps the specified function in an <see cref="Operation" />.</summary>
      <returns>
The result of the function.</returns>
      <param name="function">
The function to wrap.</param>
      <param name="name">
The name of the operation.</param>
      <param name="categoryName">
<para>The name of the category used by performance counters</para> <para>By default uses the <paramref name="name" />.</para></param>
      <param name="methodName">
<para>The name of the method.</para> <para>By default uses the <paramref name="name" /></para>.</param>
      <param name="instance">
<para>The instance that the operation is started on.</para> <para>By default the value is a <see langword="null" />.</para></param>
      <param name="arguments">
The operation arguments.</param>
      <param name="warningDuration">
<para>The maximum duration before logging a warning.</para> <para>By default this is <see cref="TimeSpan.MaxValue" />.</para></param>
      <param name="criticalDuration">
<para>The maximum duration before logging an error.</para> <para>By default this is <see cref="TimeSpan.MaxValue" />.</para></param>
      <param name="logUnhandledExceptions">
If set to <c>true</c> log unhandled exceptions that are not <see cref="LoggingException" />s.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Operation.Dispose">
    </member>
    <member name="M:WebApplications.Utilities.Logging.Operation.Equals(WebApplications.Utilities.Logging.Operation,WebApplications.Utilities.Logging.Operation)">
      <param name="x">
</param>
      <param name="y">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Operation.GetHashCode(WebApplications.Utilities.Logging.Operation)">
      <param name="obj">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Operation.Equals(WebApplications.Utilities.Logging.Operation)">
      <summary>
Compares two base operations safely.</summary>
      <returns>
Returns <c>true</c> if operations are equal; otherwise returns <c>false</c>.</returns>
      <param name="operation">
The base operation to compare with.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Operation.ToString">
      <summary>
Returns a <see cref="string" /> that represents this instance.</summary>
      <returns>
A <see cref="string" /> representation of this instance. The format strings can be changed in the Resources.resx resource file at the key 'OperationToString', 'OperationArgumentsFormat' and 'OperationArgumentsKvp'</returns>
      <exception cref="ArgumentNullException">
The format string was a <see langword="null" />.</exception>
      <exception cref="FormatException">
An index from the format string is either less than zero or greater than or equal to the number of arguments.</exception>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Operation.Created">
      <summary>
The time the operation was <see cref="CombGuid.Created">created</see>.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Operation.Parent">
      <summary>
Gets the parent <see cref="Operation" />.</summary>
      <exception cref="LoggingException">
Cannot recover the operation's parent with the stored parent Guid.</exception>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Operation.Arguments">
      <summary>
The operation's arguments.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Operation.Current">
      <summary>
Gets the current operation; or <see langword="null" /> if there is none.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Operation.InProgress">
      <summary>
Gets a <see cref="bool" /> value indicating whether the operation is currently in progress.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Operation.Xml">
      <summary>
Gets the XML version of the operation.</summary>
      <remarks>
The XML version is cached to avoid regeneration.</remarks>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Log">
      <summary>
Holds information about a single log item.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Equals(WebApplications.Utilities.Logging.Log)">
      <summary>
Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>
Returns <c>true</c> if the current log item is equal to the <paramref name="other" /> log item specified; otherwise returns <c>false</c>.</returns>
      <param name="other">
The log item to compare the instance with.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.ToString">
      <summary>
Returns a <see cref="string" /> that represents this instance.</summary>
      <returns>
A <see cref="string" /> representation of this instance. The format strings can be changed in the Resources.resx resource file at the key 'LogToString' and 'LogException'</returns>
      <exception cref="ArgumentNullException">
The format string was a <see langword="null" />.</exception>
      <exception cref="FormatException">
An index from the format string is either less than zero or greater than or equal to the number of arguments.</exception>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Log.Operation">
      <summary>
Gets the <see cref="Operation">operation</see>.</summary>
      <exception cref="LoggingException">
Operation was not re-linked correctly.</exception>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Log.TimeStamp">
      <summary>
The time stamp of when the log item was created.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Log.Xml">
      <summary>
Gets the XML version of the operation.</summary>
      <remarks>
The XML version is cached to avoid regeneration.</remarks>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Log.IsException">
      <summary>
Gets a <see cref="bool" /> value indicating whether this instance was generated from an exception.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Log.Context">
      <summary>
Gets the <see cref="LogContext">context</see> information for the log item.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration">
      <summary>
The configuration section for logging configurations.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration.LogCacheMaximumEntries">
      <summary>
Gets maximum size (number of log entries) for the cache.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration.MinBatchSize">
      <summary>
Gets minimum batch size.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration.ApplicationName">
      <summary>
Gets or sets the name of the application.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration.MaxBatchSize">
      <summary>
Gets the maximum batch size.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration.BatchWait">
      <summary>
Gets the batch wait time.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration.LogCacheExpiry">
      <summary>
Gets the log cache's expiry.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration.ApplicationGuid">
      <summary>
Gets or sets the application <see cref="Guid" />.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration.Loggers">
      <summary>
Gets all of the <see cref="LoggersCollection">loggers</see>.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration.ValidLevels">
      <summary>
Gets the valid <see cref="LogLevels">logging levels</see>.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Configuration.LoggingConfiguration.Enabled">
      <summary>
Gets a value indicating whether logging is enabled.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Configuration.LoggersCollection">
      <summary>
A collection of <see cref="LoggerElement">loggers</see>.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.LoggingException">
      <summary>
Implements a specialised Exception handler used throughout Babel, automatically logs errors and the context in which they occurred. Also makes use of Babel's late-binding translation. BabelException should always be used where exceptions are thrown.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.#ctor(System.String,System.Object[])">
      <summary>
Initializes a new instance of the <see cref="LoggingException" /> class.</summary>
      <remarks>
<para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="message" /> to not be a null value.</para> <para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="parameters" /> to not be a null value.</para></remarks>
      <param name="message">
The exception message.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.#ctor(WebApplications.Utilities.Logging.LogContext,System.String,System.Object[])">
      <summary>
Initializes a new instance of the <see cref="LoggingException" /> class.</summary>
      <remarks>
<para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="message" /> to not be a null value.</para> <para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="parameters" /> to not be a null value.</para></remarks>
      <param name="context">
The log context.</param>
      <param name="message">
The exception message.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.#ctor(System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Initializes a new instance of the <see cref="LoggingException" /> class.</summary>
      <remarks>
<para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="message" /> to not be a null value.</para> <para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="parameters" /> to not be a null value.</para></remarks>
      <param name="message">
The exception message.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.#ctor(WebApplications.Utilities.Logging.LogContext,System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Initializes a new instance of the <see cref="LoggingException" /> class.</summary>
      <remarks>
<para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="message" /> to not be a null value.</para> <para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="parameters" /> to not be a null value.</para> <para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="context" /> to not be a null value.</para></remarks>
      <param name="context">
The log context.</param>
      <param name="message">
The exception message.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.#ctor(System.Exception,WebApplications.Utilities.Logging.LogLevel)">
      <summary>
Initializes a new instance of the <see cref="LoggingException" /> class.</summary>
      <remarks>
<para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="innerException" /> to not be a null value.</para></remarks>
      <param name="innerException">
The inner exception.</param>
      <param name="level">
The log level.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.#ctor(System.Exception,System.String,System.Object[])">
      <summary>
Initializes a new instance of the <see cref="LoggingException" /> class.</summary>
      <remarks>
<para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="message" /> to not be a null value.</para> <para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="parameters" /> to not be a null value.</para></remarks>
      <param name="innerException">
The inner exception.</param>
      <param name="message">
The exception message.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.#ctor(System.Exception,System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Initializes a new instance of the <see cref="LoggingException" /> class.</summary>
      <remarks>
<para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="message" /> to not be a null value.</para> <para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="parameters" /> to not be a null value.</para></remarks>
      <param name="innerException">
The inner exception.</param>
      <param name="message">
The exception message.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.#ctor(WebApplications.Utilities.Logging.LogContext,System.Exception,System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Initializes a new instance of the <see cref="LoggingException" /> class.</summary>
      <remarks>
<para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="message" /> to not be a null value.</para> <para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="parameters" /> to not be a null value.</para> <para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="context" /> to not be a null value.</para></remarks>
      <param name="context">
The log context.</param>
      <param name="innerException">
The inner exception.</param>
      <param name="message">
The exception message.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
When overridden in a derived class, sets the <see cref="SerializationInfo" /> with information about the exception.</summary>
      <param name="info">
The <see cref="SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">
The <see cref="StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="ArgumentNullException">
The <paramref name="info" /> parameter is a <see langword="null" />.</exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.GetXml(System.Exception,System.Boolean,System.Boolean)">
      <summary>
Gets the XML representation of an exception. This is cached to avoid reconstructing the XML each time.</summary>
      <returns>
The XML representation of the exception.</returns>
      <param name="exception">
The exception.</param>
      <param name="deep">
If <c>true</c> then returns the inner exceptions.</param>
      <param name="includeStackTrace">
If set to <c>true</c> includes stack traces and full logs (where available).</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.GetXml">
      <summary>
Gets the XML representation of an exception. This is cached to avoid reconstructing the XML each time.</summary>
      <returns>
The XML representation of the exception.</returns>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LoggingException.ToString">
      <summary>
Returns a <see cref="string" /> that represents this instance.</summary>
      <returns>
A <see cref="string" /> representation this instance.</returns>
    </member>
    <member name="P:WebApplications.Utilities.Logging.LoggingException.Parameters">
      <summary>
Gets the parameters as an <see cref="Array" />.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.LoggingException.StackTrace">
      <summary>
Gets the stack trace as a <see cref="string" />. Occasionally the stack trace becomes unavailable, so we capture to string on construction.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.LogContext">
      <summary>
Allows for additional contextual information to be stored against a <see cref="Log">log item</see>.</summary>
      <remarks>
As well as constructing a <see cref="LogContext" /> directly, it is equally valid to use one of the implicit casts, or the static <see cref="Empty">new LogContext()</see>.</remarks>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LogContext.#ctor(WebApplications.Utilities.Logging.LogContext,System.Object[])">
      <summary>
Initializes a new instance of the <see cref="LogContext" /> class. Adds a parameter collection to an optional existing context.</summary>
      <param name="context">
The context.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LogContext.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
      <summary>
Initializes a new instance of the <see cref="LogContext" /> class.</summary>
      <remarks>
This can accept any object that implements the interface, which includes objects that implement <see cref="IDictionary{TKey, TValue}">IDictionary&lt;string, string&gt;</see>.</remarks>
      <param name="keyValuePairs">
The key value pairs.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LogContext.#ctor(System.String,System.String,System.String[])">
      <summary>
Initializes a new instance of the <see cref="LogContext" /> class.</summary>
      <remarks>
This can accept any object that implements the interface, which includes objects that implement <see cref="IDictionary{TKey, TValue}">IDictionary&lt;string, string&gt;</see>.</remarks>
      <param name="key">
The first key.</param>
      <param name="value">
The first value.</param>
      <param name="keyValuePairs">
Subsequent key value pairs.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LogContext.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>
Initializes a new instance of the <see cref="LogContext" /> class.</summary>
      <remarks>
This can accept any object that implements the interface, which includes objects that implement <see cref="IDictionary{TKey, TValue}">IDictionary&lt;string, string&gt;</see>.</remarks>
      <param name="keyValuePairs">
The key value pairs.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LogContext.GetEnumerator">
      <summary>
Returns an enumerator that iterates through the collection.</summary>
      <returns>
A <see cref="T:System.Collections.Generic.IEnumerator`1">T:System.Collections.Generic.IEnumerator`1</see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LogContext.CreateRegion(System.String,System.String,System.String[])">
      <summary>
Creates a context region.</summary>
      <remarks>
Although this accepts a <see cref="LogContext" />, you can implicitly convert a <see cref="Dictionary{TKey,TValue}">Dictionary&lt;string,string&gt;</see> or <see cref="IEnumerable{T}">enumeration</see> of <see cref="KeyValuePair{TKey,TValue}">KeyValuePair&lt;string,string&gt;</see> into a <see cref="LogContext" />. In doing so it automatically prepends the existing context from the thread stack.</remarks>
      <param name="key">
</param>
      <param name="value">
</param>
      <param name="keyValuePairs">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LogContext.CreateRegion(WebApplications.Utilities.Logging.LogContext)">
      <summary>
Creates a context region.</summary>
      <remarks>
Although this accepts a <see cref="LogContext" />, you can implicitly convert a <see cref="Dictionary{TKey,TValue}">Dictionary&lt;string,string&gt;</see> or <see cref="IEnumerable{T}">enumeration</see> of <see cref="KeyValuePair{TKey,TValue}">KeyValuePair&lt;string,string&gt;</see> into a <see cref="LogContext" />. In doing so it automatically prepends the existing context from the thread stack.</remarks>
      <param name="context">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LogContext.ToString">
      <summary>
Returns a <see cref="string" /> that represents this instance.</summary>
      <returns>
A <see cref="string" /> representation of this instance. The format strings can be changed in the Resources.resx resource file at the key 'LogContextToString'</returns>
      <exception cref="ArgumentNullException">
The format string was a <see langword="null" />.</exception>
      <exception cref="FormatException">
An index from the format string is either less than zero or greater than or equal to the number of arguments.</exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LogContext.op_implicit(System.Collections.Generic.Dictionary{System.String,System.String})~WebApplications.Utilities.Logging.LogContext">
      <summary>
Performs an implicit conversion from <see cref="Dictionary&lt;string, string&gt;" /> to <see cref="WebApplications.Utilities.Logging.LogContext" />.</summary>
      <returns>
The result of the conversion.</returns>
      <param name="dictionary">
The dictionary to convert.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.LogContext.op_implicit(System.Collections.Generic.KeyValuePair{System.String,System.String})~WebApplications.Utilities.Logging.LogContext">
      <summary>
Performs an implicit conversion from <see cref="KeyValuePair&lt;string, string&gt;" /> to <see cref="WebApplications.Utilities.Logging.LogContext" />.</summary>
      <returns>
The result of the conversion.</returns>
      <param name="keyValuePair">
The key value pair.</param>
    </member>
    <member name="P:WebApplications.Utilities.Logging.LogContext.Xml">
      <summary>
Gets the XML version of the operation. This is cached to avoid reconstructing the XML each time.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.LogContext.Region">
      <summary>
Creates a region from the current <see cref="LogContext" />.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.LogContext.Item(System.String)">
      <summary>
Gets the value with the specified key, or a <see langword="null" /> if not found.</summary>
      <param name="[CanBeNull] string key">
</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.TryGetLogger(System.String,WebApplications.Utilities.Logging.Interfaces.ILogger@)">
      <summary>
Tries to retrieve the logger with the name specified.</summary>
      <returns>
Returns <c>true</c> if the logger was retrieved successfully; otherwise returns <c>false</c>.</returns>
      <param name="loggerName">
The name of the logger to retrieve.</param>
      <param name="logger">
The retrieved logger.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Get(System.DateTime,System.Int32)">
      <summary>
Gets all of the logs from the end date backwards up to the specified limit.</summary>
      <returns>
The retrieved logs in reverse date order, the first being the newest log before the <paramref name="endDate" />.</returns>
      <param name="endDate">
The last date to get logs up to (exclusive).</param>
      <param name="limit">
The maximum number of logs to retrieve.</param>
      <exception cref="LoggingException">
<para>There is no log cache available.</para> <para>-or-</para> <para><paramref name="limit" /> is less than 1.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Get(WebApplications.Utilities.Logging.Loggers.LoggerBase,System.DateTime,System.Int32)">
      <summary>
Gets all of the logs from the end date backwards up to the specified limit.</summary>
      <returns>
The retrieved logs in reverse date order, the first being the newest log before the <paramref name="endDate" />.</returns>
      <param name="logger">
The logger to use.</param>
      <param name="endDate">
The last date to get logs up to. (exclusive)</param>
      <param name="limit">
The maximum number of logs to retrieve.</param>
      <exception cref="LoggingException">
<para><paramref name="logger" /> doesn't support <see cref="WebApplications.Utilities.Logging.Loggers.LoggerBase.CanRetrieve">retrieval</see>.</para> <para>-or-</para> <para><paramref name="limit" /> is less than 1.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Get(System.DateTime,System.DateTime)">
      <summary>
Gets all of the logs from the end date backwards up to the start date.</summary>
      <returns>
The retrieved logs in reverse date order, the first being the newest log before the <paramref name="endDate" /> and the last being the first log after the <paramref name="startDate" />.</returns>
      <param name="endDate">
The last date to get logs from (exclusive).</param>
      <param name="startDate">
The start date to get logs up to (inclusive).</param>
      <exception cref="LoggingException">
<para>There is no log cache available.</para> <para>-or-</para> <para>The logger doesn't support <see cref="WebApplications.Utilities.Logging.Loggers.LoggerBase.CanRetrieve">retrieval</see>.</para> <para>-or-</para> <para><paramref name="startDate" /> is is greater than the <see cref="System.DateTime.Now">current date</see>.</para> <para>-or-</para> <para><paramref name="startDate" /> is greater than <paramref name="endDate" />.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Get(WebApplications.Utilities.Logging.Loggers.LoggerBase,System.DateTime,System.DateTime)">
      <summary>
Gets all logs from the end date backwards to start date</summary>
      <returns>
The retrieved logs in reverse date order, the first being the newest log before the <paramref name="endDate" /> and the last being the first log after the <paramref name="startDate" />.</returns>
      <param name="logger">
The logger to use.</param>
      <param name="endDate">
The last date to get logs from (exclusive).</param>
      <param name="startDate">
The start date to get logs up to (inclusive).</param>
      <exception cref="LoggingException">
<para>The <paramref name="logger" /> doesn't support <see cref="WebApplications.Utilities.Logging.Loggers.LoggerBase.CanRetrieve">retrieval</see>.</para> <para>-or-</para> <para><paramref name="startDate" /> is greater than the <see cref="System.DateTime.Now">current date</see>.</para> <para>-or-</para> <para><paramref name="startDate" /> is greater than <paramref name="endDate" />.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.GetForward(System.DateTime,System.Int32)">
      <summary>
Gets all of the logs from the start date forwards up to the specified limit.</summary>
      <returns>
The retrieved logs starting from the <paramref name="startDate" /> up to the specified <paramref name="limit" />.</returns>
      <param name="startDate">
The start date to get logs from (inclusive).</param>
      <param name="limit">
The maximum number of logs to retrieve.</param>
      <exception cref="LoggingException">
<para>There is no log cache available.</para> <para>-or-</para> <para>The logger doesn't support <see cref="WebApplications.Utilities.Logging.Loggers.LoggerBase.CanRetrieve">retrieval</see>.</para> <para>-or-</para> <para><paramref name="limit" /> is less than 1.</para> <para>-or-</para> <para><paramref name="startDate" /> is greater than the <see cref="System.DateTime.Now">current date</see>.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.GetForward(WebApplications.Utilities.Logging.Loggers.LoggerBase,System.DateTime,System.Int32)">
      <summary>
Gets all of the logs from the start date forwards up to the specified limit.</summary>
      <returns>
The retrieved logs starting from the <paramref name="startDate" /> up to the specified <paramref name="limit" />.</returns>
      <param name="logger">
The logger to use.</param>
      <param name="startDate">
The start date to get logs from (inclusive).</param>
      <param name="limit">
The maximum number of logs to retrieve.</param>
      <exception cref="LoggingException">
<para>The <paramref name="logger" /> doesn't implement Get.</para> <para>-or-</para> <para>The <paramref name="logger" /> doesn't support <see cref="WebApplications.Utilities.Logging.Loggers.LoggerBase.CanRetrieve">retrieval</see>.</para> <para>-or-</para> <para><paramref name="limit" /> is less than 1.</para> <para>-or-</para> <para><paramref name="startDate" /> is greater than the <see cref="System.DateTime.Now">current date</see>.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.GetForward(System.DateTime,System.DateTime)">
      <summary>
Gets all of the logs from the start date forwards up to the end date. This calls the Get method and reverses.</summary>
      <returns>
All of the retrieved logs from the <paramref name="startDate" /> to the <paramref name="endDate" />.</returns>
      <param name="startDate">
The start date to get logs from (inclusive).</param>
      <param name="endDate">
The last date to get logs to (exclusive).</param>
      <exception cref="LoggingException">
<para>The logger doesn't support <see cref="WebApplications.Utilities.Logging.Loggers.LoggerBase.CanRetrieve">retrieval</see>.</para> <para>-or-</para> <para><paramref name="startDate" /> is greater than the <see cref="System.DateTime.Now">current date</see>.</para> <para>-or-</para> <para><paramref name="startDate" /> is greater than the <paramref name="endDate" />.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.GetForward(WebApplications.Utilities.Logging.Loggers.LoggerBase,System.DateTime,System.DateTime)">
      <summary>
Gets all of the logs from the start date forwards up to the end date. This calls the Get method and reverses.</summary>
      <returns>
All of the retrieved logs from the <paramref name="startDate" /> to the <paramref name="endDate" />.</returns>
      <param name="logger">
The logger to use.</param>
      <param name="startDate">
The start date to get logs from (inclusive).</param>
      <param name="endDate">
The last date to get logs to (exclusive).</param>
      <exception cref="LoggingException">
<para>The <paramref name="logger" /> doesn't implement Get.</para> <para>-or-</para> <para>The <paramref name="logger" /> doesn't support <see cref="WebApplications.Utilities.Logging.Loggers.LoggerBase.CanRetrieve">retrieval</see>.</para> <para>-or-</para> <para><paramref name="startDate" /> is greater than the <see cref="System.DateTime.Now">current date</see>.</para> <para>-or-</para> <para><paramref name="startDate" /> is greater than the <paramref name="endDate" />.</para></exception>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Flush">
      <summary>
Flushes all outstanding logs.</summary>
      <remarks>
Note: If more logs are added whilst the system is flushing this will continue to block until there are no outstanding logs.</remarks>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(System.String,System.Object[])">
      <summary>
Logs a message at the information <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see>.</summary>
      <remarks>
If the information <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see> is invalid then the log won't be added.</remarks>
      <param name="message">
The log message.</param>
      <param name="parameters">
The optional parameters, for formatting the message.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(WebApplications.Utilities.Logging.LogContext,System.String,System.Object[])">
      <summary>
Logs a message at the information <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see>.</summary>
      <remarks>
If the information <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see> is invalid then the log won't be added.</remarks>
      <param name="context">
The log context.</param>
      <param name="message">
The log message.</param>
      <param name="parameters">
The optional parameters, for formatting the message.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(System.Guid,System.String,System.Object[])">
      <summary>
Logs a message at the information <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see>.</summary>
      <remarks>
If the information <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see> is invalid then the log won't be added.</remarks>
      <param name="logGroup">
The unique ID that groups log items together.</param>
      <param name="message">
The log message.</param>
      <param name="parameters">
The optional parameters, for formatting the message.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(System.Guid,WebApplications.Utilities.Logging.LogContext,System.String,System.Object[])">
      <summary>
Logs a message at the information <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see>.</summary>
      <remarks>
If the information <see cref="WebApplications.Utilities.Logging.LogLevel">log level</see> is invalid then the log won't be added.</remarks>
      <param name="logGroup">
The unique ID that groups log items together.</param>
      <param name="context">
The log context.</param>
      <param name="message">
The log message.</param>
      <param name="parameters">
The optional parameters, for formatting the message.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Logs a message at the specified <see cref="WebApplications.Utilities.Logging.LogLevel" />.</summary>
      <remarks>
If the log <paramref name="level" /> is invalid then the log won't be added.</remarks>
      <param name="message">
The log message.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The optional parameters, for formatting the message.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(WebApplications.Utilities.Logging.LogContext,System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Logs a message at the specified <see cref="WebApplications.Utilities.Logging.LogLevel" />.</summary>
      <remarks>
If the log <paramref name="level" /> is invalid then the log won't be added.</remarks>
      <param name="context">
The log context.</param>
      <param name="message">
The log message.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The optional parameters, for formatting the message.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(System.Guid,System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Logs a message at the specified <see cref="WebApplications.Utilities.Logging.LogLevel" />.</summary>
      <remarks>
If the log <paramref name="level" /> is invalid then the log won't be added.</remarks>
      <param name="logGroup">
The unique ID that groups log items together.</param>
      <param name="message">
The log message.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The optional parameters, for formatting the message.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(System.Guid,WebApplications.Utilities.Logging.LogContext,System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Logs a message at the specified <see cref="WebApplications.Utilities.Logging.LogLevel" />.</summary>
      <remarks>
If the log <paramref name="level" /> is invalid then the log won't be added.</remarks>
      <param name="logGroup">
The unique ID that groups log items together.</param>
      <param name="context">
The log context.</param>
      <param name="message">
The log message.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The optional parameters, for formatting the message.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(System.Exception,WebApplications.Utilities.Logging.LogLevel)">
      <summary>
Logs an exception.</summary>
      <remarks>
If the log <paramref name="level" /> is invalid then the log won't be added.</remarks>
      <param name="exception">
<para>The exception to log.</para> <para><see cref="LoggingException" />'s add themselves and so this method ignores them.</para></param>
      <param name="level">
<para>The log level.</para> <para>By default this uses the error log level.</para></param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(WebApplications.Utilities.Logging.LogContext,System.Exception,WebApplications.Utilities.Logging.LogLevel)">
      <summary>
Logs an exception.</summary>
      <remarks>
If the log <paramref name="level" /> is invalid then the log won't be added.</remarks>
      <param name="context">
The log context.</param>
      <param name="exception">
<para>The exception to log.</para> <para><see cref="LoggingException" />'s add themselves and so this method ignores them.</para></param>
      <param name="level">
<para>The log level.</para> <para>By default this uses the error log level.</para></param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(System.Guid,System.Exception,WebApplications.Utilities.Logging.LogLevel)">
      <summary>
Logs an exception.</summary>
      <remarks>
If the log <paramref name="level" /> is invalid then the log won't be added.</remarks>
      <param name="logGroup">
The unique ID that groups log items together.</param>
      <param name="exception">
<para>The exception to log.</para> <para><see cref="LoggingException" />'s add themselves and so this method ignores them.</para></param>
      <param name="level">
<para>The log level.</para> <para>By default this uses the error log level.</para></param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Log.Add(System.Guid,WebApplications.Utilities.Logging.LogContext,System.Exception,WebApplications.Utilities.Logging.LogLevel)">
      <summary>
Logs an exception.</summary>
      <remarks>
If the log <paramref name="level" /> is invalid then the log won't be added.</remarks>
      <param name="logGroup">
The unique ID that groups log items together.</param>
      <param name="context">
The log context.</param>
      <param name="exception">
<para>The exception to log.</para> <para><see cref="LoggingException" />'s add themselves and so this method ignores them.</para></param>
      <param name="level">
<para>The log level.</para> <para>By default this uses the error log level.</para></param>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Log.ValidLevels">
      <summary>
Gets the valid <see cref="WebApplications.Utilities.Logging.LogLevel">log levels</see>.</summary>
    </member>
    <member name="P:WebApplications.Utilities.Logging.Log.Loggers">
      <summary>
Gets the loggers.</summary>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Loggers.EventLogger">
      <summary>
Allows logging to Windows <see cref="EventLog">event logs</see>.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.EventLogger.#ctor(System.String,System.String,WebApplications.Utilities.Logging.LogLevels)">
      <summary>
Initializes a new instance of the <see cref="EventLogger" /> class.</summary>
      <remarks>
<para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="name" /> to not be a null value.</para> <para>There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="eventLog" /> to not be a null value.</para></remarks>
      <param name="name">
The name of the logger.</param>
      <param name="eventLog">
<para>The <see cref="System.Diagnostics.EventLog.Log">name</see> of the <see cref="EventLog">event log</see> to read/write to.</para> <para>By default this is set to "Application".</para></param>
      <param name="validLevels">
<para>The valid log levels.</para> <para>By default this is set to <see cref="LogLevels">LogLevels.AtLeastInformation</see>.</para></param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Loggers.EventLogger.Add(WebApplications.Utilities.Logging.Log)">
      <summary>
Adds the specified log to the <see cref="EventLog">event log</see>.</summary>
      <remarks>
There is a <see cref="System.Diagnostics.Contracts.Contract">contract</see> on this method requiring the <paramref name="log" /> to not be a null value.</remarks>
      <param name="log">
The log to write to the <see cref="EventLog">event log</see>.</param>
      <exception cref="System.InvalidOperationException">
The registry key for the event log couldn't be opened.</exception>
      <exception cref="System.ArgumentException">
The <see cref="Log.ToString()">log message</see> is larger than 32766 bytes.</exception>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Interfaces.ILoggerFacade">
      <summary>
A simple Logger interface.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Interfaces.ILoggerFacade.Add(System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Adds the specified log.</summary>
      <param name="message">
The message to log.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Interfaces.ILoggerFacade.Add(System.Guid,System.String,WebApplications.Utilities.Logging.LogLevel,System.Object[])">
      <summary>
Adds the specified log.</summary>
      <param name="logGroup">
The unique ID to group log items together.</param>
      <param name="message">
The message to log.</param>
      <param name="level">
The log level.</param>
      <param name="parameters">
The parameters.</param>
    </member>
    <member name="T:WebApplications.Utilities.Logging.Performance.RequiresPerformanceCounterAttribute">
      <summary>
An attribute added to assemblies to indicate a performance counter is required. This attribute is added automatically by the performance system and should not be added manually.</summary>
    </member>
    <member name="M:WebApplications.Utilities.Logging.Performance.RequiresPerformanceCounterAttribute.#ctor(System.String,System.Boolean)">
      <summary>
Initializes a new instance of the <see cref="RequiresPerformanceCounterAttribute" /> class.</summary>
      <param name="categoryName">
The name of the category.</param>
      <param name="isTimer">
If set to <c>true</c> the counter is a timer.</param>
    </member>
  </members>
</doc>
