<?xml version="1.0"?>
<test string="A Test String">
  <custom>
    <A>A</A>
    <B>B</B>
    <C>C</C>
  </custom>
  <ignoredNode>This node will be ignored as this is an XmlConfigurationSection, so unknown nodes are preserved.</ignoredNode>
  <constructors>
    <add name="test1" type="WebApplications.Utilities.Test.TestObject, WebApplications.Utilities.Test" attribParam="2">
      <parameters>
        <!-- 
          Explicit parameters override attributes, so in this example the name here overrides "test1" from the attribute.
          Parameters expressed as attributes are never 'required', however the type converter and type can be set in the
          defining ConfigurationElement rather than being set in the configuration below.
          
          They may be 'required' as an attribute, but this is not the same as being required as a parameter.
          -->
        <add name="name" value="A Name"/>
        <!--
          Just because a parameter is not required, does not mean it's unimportant, if a constructor is available that
          specifies the intValue parameter it will be used in preference to one that doesn't.
          
          As well as specifying a value and required attributes, you can also explicitly specify the type, and
          a custom type converter.  This is particularly handy for custom types that don't declaritively specify
          a type converter anyway.  Of course the example below is trivial and unecessary as the type converter
          is the default one for Int32.  However, it does force the intValue parameter to only match a parameter
          of type 'Int32'.
          
          The typeConverter type must descend from TypeConverter.
          -->
        <add name="intValue" value="101" required="false" type="System.Int32" typeConverter="System.ComponentModel.Int32Converter, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>
        <!-- 
          Note the required property is true by default, and means that only constructors with the parameter will be matched. 
          Setting to false allows backwards compatibility for classes that don't support the new parameter.
          -->
        <add name="junk" value="whatever" required="false"/>
      </parameters>
    </add>
    <!-- 
      Parameters are of course optional, so long as their is a parameterless constructor for the type, or one
      that accepts the parameters specified by the attributes.
      -->
    <add name="test2" type="WebApplications.Utilities.Test.TestObject, WebApplications.Utilities.Test"/>
    <add name="test3" type="WebApplications.Utilities.Test.TestObject, WebApplications.Utilities.Test">
      <parameters>
        <add name="timeSpan" value="00:20:01.1234"/>
      </parameters>
    </add>
    <add name="test4" type="WebApplications.Utilities.Test.TestObject, WebApplications.Utilities.Test">
      <parameters>
        <add name="e1" value="Three"/>
      </parameters>
    </add>
  </constructors>
</test>